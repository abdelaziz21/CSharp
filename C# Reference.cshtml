/*
 * Created by SharpDevelop.
 * User: Ahmed Aboud
 * Date: 9/18/2017
 * Time: 2:26 PM
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace CSharpReference
{
	class Program
	{
		public static void Main(string[] args)
		{
			Console.WriteLine("Hello World!");
			
			// TODO: Implement Functionality Here
			        //5 here is an integer literal
        int c = 5;

        //A double value is a floating point literal.
        double x = 2.5 + 3.7;
        //A single value is given by a floating point literal with the suffix f.
        float y = 3.1f;

        //Using quotes will automatically generated constant strings
        string someLiteral = "This is a string!";
        string input = Console.ReadLine();

        //int, string, double, float, ... are just keywords - in fact, they are represented
        //by Int32, String, Double, Single - which have static (and non-static) members.
        c = int.Parse(input);//Here we use the static method [int Parse(string)] of Int32.

        //Output of a mod operation - adding string and something (or something and string)
        //will always result in a string. Additionally we have the regular operator ordering
        //which performs a % 10 before the string and a get concatenated.
        Console.WriteLine("a % 10 = " + c % 10);
                //A string is a class, which can be instantiated like this
        string s = "Hi there";
        Console.WriteLine(s);//Hi there
        ChangeString(s);
        Console.WriteLine(s);//Hi there
        ChangeString(ref s);
        Console.WriteLine(s);//s is now a null reference
        //Usually C# forbids us to leave variables uninitialized
        SampleClass sampleClass;
        SampleStruct sampleStruct;

        //However, C# thinks that an out-Function will do the initialization
        HaveALook(out sampleClass);
        HaveALook(out sampleStruct);
        
        Console.WriteLine("enter a letter");
        //We get some user input with the ReadLine() method
        string input1 = Console.ReadLine();

        //Let's see if this is empty or not
        if (input1 == "")
        {
            Console.WriteLine("The input is empty!");
        }
        else
        {
            //A string is a char array and has a Length property
            //It also can be accessed like a char array, giving
            //us single chars.
            for (int i = 0; i < input1.Length; i++)
            {
                switch (input1[i])
                {
                    case 'a':
                        Console.Write("An a - and not ... ");
                        //This is always required, we cannot just fall through.
                        goto case 'z';
                    case 'z':
                        Console.WriteLine("A z!");
                        break;
                    default:
                        Console.WriteLine("Whatever ...");
                        //This is required even in the last block
                        break;
                }
            }
        }
        //Creating an array is possible by just appending [] to any data type
int[] myints = new int[4];
//This is now a fixed array with 4 elements. Arrays in C# are 0-based
//hence the first element has index 0.
myints[0] = 2;
myints[1] = 3;
myints[2] = 17;
myints[3] = 24;

//This foreach construct is new in C# (compared to C++):
foreach(int myint in myints)
{
    //Write will not start a new line after the string.
    Console.Write("The element is given by ");
    //WriteLine will do that.
    Console.WriteLine(myint);
}
//Create a class instance (code to be placed in a method)
MyClass instance = new MyClass();

//We create two variables of type MyClass
MyClass a = new MyClass();
MyClass b = new MySubClass();

//Now we call the Write() method on each of them, the only
//difference being that in fact b is a more specialized type
a.Write("Flo"); //Outputs ... from MyClass!
b.Write("Flo"); //Outputs ... from MySubClass!

        Program e = new Program();//Uses the default constructor
		Program f = new Program(2);//Uses the constructor with 1 argument
		Program g = new Program(2, "a");//Uses the constructor with 2 arguments
		Program h = new Program(2, 3);//Uses the other constructor with 2 arguments
		
		//Ouch, MyClass is abstract!
		//MyClass4 i = new MyClass4();
		
		//This works fine, MyClass can still be used as a type
		MyClass4 j = new MySubClass4();
		
		//we can use interfaces as types
		MyInterface myif = new MySubSubClass();
		
		try
{
    //FunctionWhichMightThrowException();
}
catch (Exception ex)
{
    //React to it e.g.
    Console.WriteLine(ex.Message);
}

        Console.Write("Press any key to continue . . . ");
		Console.ReadKey(true);
    }

    static void ChangeString(string str)
    {
        str = null;
    }

    static void ChangeString(ref string str)
    {
        str = null;
    }
        static void HaveALook(out SampleClass c)
    {
        //Insert a breakpoint here to see the
        //value of c before the assignment:
        //It will be null...
        c = new SampleClass();
    }

    static void HaveALook(out SampleStruct s)
    {
        //Insert a breakpoint here to see the
        //value of s before the assignment:
        //It will NOT be null...
        s = new SampleStruct();
    }

    //In C# you can created nested classes
    class SampleClass
    {
    }

    //A structure always inherits ONLY from object,
    //we cannot specify other classes (more on that later)
    //However, an arbitrary number of interfaces can
    //be implemented (more on that later as well)
    struct SampleStruct
    {
    }
    //Create a class definition
class MyClass
{
    public virtual void Write(string name)
    {
        Console.WriteLine("Hi there... {0}!", name);
    }
}

class MySubClass : MyClass
{
    public override void Write(string name)
    {
        Console.WriteLine("Hi again!");
    }
}
//MyClass is visible from this library and other libraries
public class MyClass2
{
    //This one can only be accessed from MyClass
    private int a;

    //Classes inheriting from MyClass can access b like MyClass can
    protected int b;

    //No modifier, i.e., the method RightNumber() is private
    int RightNumber()
    {
        return a;
    }

    //This will be seen from the outside
    public int WhatNumber()
    {
        //Access inside the class is possible
        return RightNumber();
    }
}

//MySubClass is only visible from this library
internal class MySubClass2 : MyClass2
{
    int AnotherRightNumber()
    {
        //Works
        b = 8;
        //Does not work - a cannot be accessed since it is private
        return b;
        
  
    }
}
class MyClass3
{
    string str;

    public void Change(string str)
    {
        //Here this.str is the global variable str and
        //str is the local (passed as parameter) variable
        this.str = str;
    }
    
}
class MySubClass3 : MyClass
{
    public override void Write(string name)
    {
        //First we want to use the original implementation
        base.Write(name);
        //Then our own
        Console.WriteLine("Hi {0} from MySubClass!", name);
    }
}

//properties
private int myVariable;

public int MyVariable
{
    get { return myVariable; }
    set { myVariable = value; }
}


    public Program()
    {
        //Empty default constructor
    }

    public Program(int a)
    {
        //Constructor with one argument
    }

    public Program(int a, string b)
    {
        //Constructor with two arguments
    }

    public Program(int a, int b)
    {
        //Another constructor with two arguments
    }
    
   abstract class MyClass4
{
    public abstract void Write(string name);
}

	class MySubClass4 : MyClass4
{
    public override void Write(string name)
    {
        Console.WriteLine("Hi {0} from an implementation of Write!", name);
    }
}
	interface MyInterface
{
    void DoSomething();

    string GetSomething(int number);
}
	class MyOtherClass : MyInterface
{
    public void DoSomething()
    { }

    public string GetSomething(int number)
    {
        return number.ToString();
    }
}

class MySubSubClass : MySubClass, MyInterface
{
    public void DoSomething()
    { }

    public string GetSomething(int number)
    {
        return number.ToString();
    }       
}
void MyBuggyMethod()
{
    Console.WriteLine("Entering my method");
    throw new MyException();
    Console.WriteLine("Leaving my method");
}
class MyException : Exception
{
    public MyException()
        : base("This is my exception")
    {
    }
}


			
		}
}